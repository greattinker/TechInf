
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;


entity Entprellung is
  
	port (
		clk : in std_logic;
		btn : in std_logic;
		btnout  : out  std_logic
		);
		
end Entprellung;

architecture entprel1 of Entprellung is
	signal old_state : std_logic := '0';
	signal new_state : std_logic;
	
	signal btn_state : std_logic := '0';
	
	signal zaehler_state : std_logic;
	signal zaehler_en : std_logic;
	signal zaehler_reset : std_logic := '0';
	
	
	component Zaehler
		port (
			clk : in std_logic;
			count_steps : in unsigned(31 downto 0);
			counter_en : in std_logic;
			counter_reset : in std_logic;
			counter_state : out std_logic
			);
	end component;
	
begin 
	custom_zaehler : Zaehler PORT MAP (clk => clk, count_steps => to_unsigned(150000, 32), counter_en => zaehler_en, counter_state => zaehler_state, counter_reset => zaehler_reset);
	
	process (clk)
	begin
		if rising_edge(clk) then
			
			
			new_state <= zaehler_state;
			
			if btn = '1' then
				case new_state is
				when '0' =>		
								zaehler_reset <= '0';
								old_state <= '1';
								if btn = '1' then
									btn_state <= '1';
								elsif btn = '0' then
									btn_state <= '0';
								end if;
								
					when '1' => null;
					when others => null;
				end case;
			end if;
			
			if new_state = '0' then
				zaehler_reset <= '1';
				old_state <= '0';
			end if; 
		end if;
	end process;
	
	
	zaehler_en <= old_state;
	btnout <= btn_state;
end entprel1;
